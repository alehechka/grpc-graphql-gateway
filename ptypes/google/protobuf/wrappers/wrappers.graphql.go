// Code generated by proroc-gen-graphql, DO NOT EDIT.
package wrappers

import (
	"github.com/graphql-go/graphql"
)

var (
	gql__type_UInt64Value  *graphql.Object      // message UInt64Value in google/protobuf/wrappers/wrappers.proto
	gql__type_UInt32Value  *graphql.Object      // message UInt32Value in google/protobuf/wrappers/wrappers.proto
	gql__type_StringValue  *graphql.Object      // message StringValue in google/protobuf/wrappers/wrappers.proto
	gql__type_Int64Value   *graphql.Object      // message Int64Value in google/protobuf/wrappers/wrappers.proto
	gql__type_Int32Value   *graphql.Object      // message Int32Value in google/protobuf/wrappers/wrappers.proto
	gql__type_FloatValue   *graphql.Object      // message FloatValue in google/protobuf/wrappers/wrappers.proto
	gql__type_DoubleValue  *graphql.Object      // message DoubleValue in google/protobuf/wrappers/wrappers.proto
	gql__type_BytesValue   *graphql.Object      // message BytesValue in google/protobuf/wrappers/wrappers.proto
	gql__type_BoolValue    *graphql.Object      // message BoolValue in google/protobuf/wrappers/wrappers.proto
	gql__input_UInt64Value *graphql.InputObject // message UInt64Value in google/protobuf/wrappers/wrappers.proto
	gql__input_UInt32Value *graphql.InputObject // message UInt32Value in google/protobuf/wrappers/wrappers.proto
	gql__input_StringValue *graphql.InputObject // message StringValue in google/protobuf/wrappers/wrappers.proto
	gql__input_Int64Value  *graphql.InputObject // message Int64Value in google/protobuf/wrappers/wrappers.proto
	gql__input_Int32Value  *graphql.InputObject // message Int32Value in google/protobuf/wrappers/wrappers.proto
	gql__input_FloatValue  *graphql.InputObject // message FloatValue in google/protobuf/wrappers/wrappers.proto
	gql__input_DoubleValue *graphql.InputObject // message DoubleValue in google/protobuf/wrappers/wrappers.proto
	gql__input_BytesValue  *graphql.InputObject // message BytesValue in google/protobuf/wrappers/wrappers.proto
	gql__input_BoolValue   *graphql.InputObject // message BoolValue in google/protobuf/wrappers/wrappers.proto
)

func Gql__type_UInt64Value() *graphql.Object {
	if gql__type_UInt64Value == nil {
		gql__type_UInt64Value = graphql.NewObject(graphql.ObjectConfig{
			Name: "Wrappers_Type_UInt64Value",
			Fields: graphql.Fields{
				"value": &graphql.Field{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__type_UInt64Value
}

func Gql__type_UInt32Value() *graphql.Object {
	if gql__type_UInt32Value == nil {
		gql__type_UInt32Value = graphql.NewObject(graphql.ObjectConfig{
			Name: "Wrappers_Type_UInt32Value",
			Fields: graphql.Fields{
				"value": &graphql.Field{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__type_UInt32Value
}

func Gql__type_StringValue() *graphql.Object {
	if gql__type_StringValue == nil {
		gql__type_StringValue = graphql.NewObject(graphql.ObjectConfig{
			Name: "Wrappers_Type_StringValue",
			Fields: graphql.Fields{
				"value": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_StringValue
}

func Gql__type_Int64Value() *graphql.Object {
	if gql__type_Int64Value == nil {
		gql__type_Int64Value = graphql.NewObject(graphql.ObjectConfig{
			Name: "Wrappers_Type_Int64Value",
			Fields: graphql.Fields{
				"value": &graphql.Field{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__type_Int64Value
}

func Gql__type_Int32Value() *graphql.Object {
	if gql__type_Int32Value == nil {
		gql__type_Int32Value = graphql.NewObject(graphql.ObjectConfig{
			Name: "Wrappers_Type_Int32Value",
			Fields: graphql.Fields{
				"value": &graphql.Field{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__type_Int32Value
}

func Gql__type_FloatValue() *graphql.Object {
	if gql__type_FloatValue == nil {
		gql__type_FloatValue = graphql.NewObject(graphql.ObjectConfig{
			Name: "Wrappers_Type_FloatValue",
			Fields: graphql.Fields{
				"value": &graphql.Field{
					Type: graphql.Float,
				},
			},
		})
	}
	return gql__type_FloatValue
}

func Gql__type_DoubleValue() *graphql.Object {
	if gql__type_DoubleValue == nil {
		gql__type_DoubleValue = graphql.NewObject(graphql.ObjectConfig{
			Name: "Wrappers_Type_DoubleValue",
			Fields: graphql.Fields{
				"value": &graphql.Field{
					Type: graphql.Float,
				},
			},
		})
	}
	return gql__type_DoubleValue
}

func Gql__type_BytesValue() *graphql.Object {
	if gql__type_BytesValue == nil {
		gql__type_BytesValue = graphql.NewObject(graphql.ObjectConfig{
			Name: "Wrappers_Type_BytesValue",
			Fields: graphql.Fields{
				"value": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_BytesValue
}

func Gql__type_BoolValue() *graphql.Object {
	if gql__type_BoolValue == nil {
		gql__type_BoolValue = graphql.NewObject(graphql.ObjectConfig{
			Name: "Wrappers_Type_BoolValue",
			Fields: graphql.Fields{
				"value": &graphql.Field{
					Type: graphql.Boolean,
				},
			},
		})
	}
	return gql__type_BoolValue
}

func Gql__input_UInt64Value() *graphql.InputObject {
	if gql__input_UInt64Value == nil {
		gql__input_UInt64Value = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Wrappers_Input_UInt64Value",
			Fields: graphql.InputObjectConfigFieldMap{
				"value": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__input_UInt64Value
}

func Gql__input_UInt32Value() *graphql.InputObject {
	if gql__input_UInt32Value == nil {
		gql__input_UInt32Value = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Wrappers_Input_UInt32Value",
			Fields: graphql.InputObjectConfigFieldMap{
				"value": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__input_UInt32Value
}

func Gql__input_StringValue() *graphql.InputObject {
	if gql__input_StringValue == nil {
		gql__input_StringValue = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Wrappers_Input_StringValue",
			Fields: graphql.InputObjectConfigFieldMap{
				"value": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_StringValue
}

func Gql__input_Int64Value() *graphql.InputObject {
	if gql__input_Int64Value == nil {
		gql__input_Int64Value = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Wrappers_Input_Int64Value",
			Fields: graphql.InputObjectConfigFieldMap{
				"value": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__input_Int64Value
}

func Gql__input_Int32Value() *graphql.InputObject {
	if gql__input_Int32Value == nil {
		gql__input_Int32Value = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Wrappers_Input_Int32Value",
			Fields: graphql.InputObjectConfigFieldMap{
				"value": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__input_Int32Value
}

func Gql__input_FloatValue() *graphql.InputObject {
	if gql__input_FloatValue == nil {
		gql__input_FloatValue = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Wrappers_Input_FloatValue",
			Fields: graphql.InputObjectConfigFieldMap{
				"value": &graphql.InputObjectFieldConfig{
					Type: graphql.Float,
				},
			},
		})
	}
	return gql__input_FloatValue
}

func Gql__input_DoubleValue() *graphql.InputObject {
	if gql__input_DoubleValue == nil {
		gql__input_DoubleValue = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Wrappers_Input_DoubleValue",
			Fields: graphql.InputObjectConfigFieldMap{
				"value": &graphql.InputObjectFieldConfig{
					Type: graphql.Float,
				},
			},
		})
	}
	return gql__input_DoubleValue
}

func Gql__input_BytesValue() *graphql.InputObject {
	if gql__input_BytesValue == nil {
		gql__input_BytesValue = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Wrappers_Input_BytesValue",
			Fields: graphql.InputObjectConfigFieldMap{
				"value": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_BytesValue
}

func Gql__input_BoolValue() *graphql.InputObject {
	if gql__input_BoolValue == nil {
		gql__input_BoolValue = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Wrappers_Input_BoolValue",
			Fields: graphql.InputObjectConfigFieldMap{
				"value": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
			},
		})
	}
	return gql__input_BoolValue
}
